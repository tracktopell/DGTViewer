package com.dgt.tools.dgtviewer.view;

import com.dgt.tools.dgtviewer.controller.MonitorMachine;
import com.dgt.tools.dgtviewer.model.MonitorListUpdater;
import com.dgt.tools.dgtviewer.model.MonitorMachineGroupModel;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * com.dgt.tools.dgtviewer.view.MainApp
 *
 * @author Wayssen
 */
public class MainApp extends javax.swing.JFrame implements MonitorListUpdater {

	MonitorMachineGroupModel monitorMachineGroupModel;
	private boolean reallyUpdate = false;
	private boolean updateList = false;
	private RenderPanel renderPanel = null;

	/**
	 * Creates new form MainApp
	 */
	public MainApp() {
		initComponents();
		renderPanel              = (RenderPanel)jPanel1;
		Image         iconImage    = null;
		BufferedImage imgBackgound = null;
		try{
			iconImage    = ImageIO.read(
					getClass().getResourceAsStream("/images/DGTelecomunicaciones_icono_100x100.png"));
			imgBackgound = ImageIO.read(
					getClass().getResourceAsStream("/images/MAPA_DEFAULT_1.png"));
			renderPanel.setImgBackgound(imgBackgound);
			setIconImage(iconImage);
		}catch(IOException ioe){
		}
		
		monitorMachineGroupModel = new MonitorMachineGroupModel();
		machineJList.setModel(monitorMachineGroupModel);
		machineJList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		machineJList.addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				if (!e.getValueIsAdjusting()) {
					if (machineJList.getSelectedIndex() != -1) {
						System.out.println(" >>> [" + machineJList.getSelectedIndex() + "]");
					}
				}
			}
		});

		renderPanel.setMachineModelAccesor(monitorMachineGroupModel);
		
		MonitorMachine.setMonitorListUpdater(this);
	}

	@Override
	public void updateMachineList() {
		reallyUpdate = true;

		Thread tu = new Thread() {
			@Override
			public void run() {
				machineJList.repaint();
				//machineJList.updateUI();
				reallyUpdate = false;
			}
		};
		tu.start();
		tu = null;
	}

	void startMonitorSelected() {
		int idx = machineJList.getSelectedIndex();
		MonitorMachine mm = monitorMachineGroupModel.getElementAt(idx);
		mm.startMonitoring();
	}

	void stopMonitorSelected() {
		int idx = machineJList.getSelectedIndex();
		MonitorMachine mm = monitorMachineGroupModel.getElementAt(idx);
		mm.stopMonitoring();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        machineJList = new javax.swing.JList<>();
        jPanel1 = new RenderPanel();
        statusPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuAdd = new javax.swing.JMenuItem();
        mnuRemove = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        mnuControl = new javax.swing.JMenu();
        mnuStartMonitoring = new javax.swing.JMenuItem();
        mnuStopMontoring = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        mnuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("DGT Viewer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setOneTouchExpandable(true);

        jPanel2.setLayout(new java.awt.BorderLayout());

        machineJList.setPreferredSize(new java.awt.Dimension(200, 100));
        jScrollPane2.setViewportView(machineJList);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel2);
        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);
        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        mnuFile.setText("File");

        mnuAdd.setText("Add Machine");
        mnuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddActionPerformed(evt);
            }
        });
        mnuFile.add(mnuAdd);

        mnuRemove.setText("Remove Machine");
        mnuFile.add(mnuRemove);

        mnuSave.setText("Save");
        mnuFile.add(mnuSave);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar1.add(mnuFile);

        mnuControl.setText("Control");

        mnuStartMonitoring.setText("Start Monitoring");
        mnuStartMonitoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStartMonitoringActionPerformed(evt);
            }
        });
        mnuControl.add(mnuStartMonitoring);

        mnuStopMontoring.setText("Stop Monitoring");
        mnuStopMontoring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuStopMontoringActionPerformed(evt);
            }
        });
        mnuControl.add(mnuStopMontoring);

        jMenuBar1.add(mnuControl);

        jMenu1.setText("Help");

        mnuAbout.setText("Abaout");
        jMenu1.add(mnuAbout);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuStartMonitoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStartMonitoringActionPerformed
		startMonitorSelected();
    }//GEN-LAST:event_mnuStartMonitoringActionPerformed

    private void mnuStopMontoringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuStopMontoringActionPerformed
		stopMonitorSelected();
    }//GEN-LAST:event_mnuStopMontoringActionPerformed

    private void mnuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddActionPerformed
		addMachine = new AddMachineFrm(this, "Add Machine");

		addMachine.getBtnSave().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (addMachine.getTxtHost().getText().trim().length() > 1
						&& addMachine.getTxtLabel().getText().trim().length() > 1) {
					monitorMachineGroupModel.add(
							addMachine.getTxtHost().getText(),
							addMachine.getTxtLabel().getText());

					machineJList.updateUI();
					addMachine.dispose();
				}
			}
		});
		addMachine.getBtnCancel().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				addMachine.dispose();
			}
		});

		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				addMachine.setVisible(true);
			}
		});
    }//GEN-LAST:event_mnuAddActionPerformed

	void exit() {
		renderPanel.stopRadaring();
		System.err.println(" >>> [X]");
		monitorMachineGroupModel.stopMonitorAll();
		dispose();
		System.err.println(" >>> :) !");
	}

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		exit();
    }//GEN-LAST:event_formWindowClosing

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
		exit();
    }//GEN-LAST:event_mnuExitActionPerformed

	private AddMachineFrm addMachine = null;
	private static MainApp mainFrm;
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		
		mainFrm = new MainApp();
		
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			final String lookAndFeelClass = "javax.swing.plaf.metal.MetalLookAndFeel";
            UIManager.setLookAndFeel(lookAndFeelClass);
			//UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
			//UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
			JFrame.setDefaultLookAndFeelDecorated(true);
			JDialog.setDefaultLookAndFeelDecorated(true);
//			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//				if ("Nimbus".equals(info.getName())) {
//					javax.swing.UIManager.setLookAndFeel(info.getClassName());
//					break;
//				}
//			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				mainFrm.setVisible(true);
				mainFrm.monitorMachineGroupModel.add("localhost", "machine_1");
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList<MonitorMachine> machineJList;
    private javax.swing.JMenuItem mnuAbout;
    private javax.swing.JMenuItem mnuAdd;
    private javax.swing.JMenu mnuControl;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuRemove;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenuItem mnuStartMonitoring;
    private javax.swing.JMenuItem mnuStopMontoring;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
}
